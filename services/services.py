

from lexicon.lexicon_ru import LEXICON_RU
from database.database import users_db
from lexicon.questions import all_tests
from typing import List

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
def calculate_results(user_id: int) -> List[str]:
    user_data = users_db.get(user_id)
    if not user_data or not user_data['state']:
        return ["–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Ç–µ—Å—Ç."]

    selected_test = user_data['selected_test']
    answers = user_data['answers'][selected_test]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª —Ç–µ—Å—Ç
    if len(answers) != len(all_tests[selected_test]):
        return ["–û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω."]

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        'test1': {"a": 0, "b": 0},
        'test2': {"a": 0, "b": 0}
    }

    for idx, answer in enumerate(answers, start=1):
        if answer.endswith("–∞"):
            results[selected_test]["a"] += 1
        elif answer.endswith("–±"):
            results[selected_test]["b"] += 1

    # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
    recommendations = []
    if selected_test == "–¢–µ—Å—Ç –ö–ª–∏–º–æ–≤–∞ (–î–î–û) üêæ":
        if results["test1"]["a"] > results["test1"]["b"]:
            recommendations.append("–í–∞–º –ø–æ–¥–æ–π–¥—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Ö–æ–¥–æ–º –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∏—Ä–æ–¥–æ–π (–∑–æ–æ–ª–æ–≥, –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä, –∞–≥—Ä–æ–Ω–æ–º).")
        else:
            recommendations.append("–í–∞–º –ø–æ–¥–æ–π–¥—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –º–µ—Ö–∞–Ω–∏–∫–æ–π (–∏–Ω–∂–µ–Ω–µ—Ä, –º–µ—Ö–∞–Ω–∏–∫, –∞–≤—Ç–æ–º–µ—Ö–∞–Ω–∏–∫).")

    elif selected_test == "–¢–µ—Å—Ç 2 üß©":
        if results["test2"]["a"] > results["test2"]["b"]:
            recommendations.append("–í–∞–º –ø–æ–¥–æ–π–¥—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—â–µ–Ω–∏–µ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ª—é–¥—å–º–∏ (–º–µ–Ω–µ–¥–∂–µ—Ä, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, HR).")
        else:
            recommendations.append("–í–∞–º –ø–æ–¥–æ–π–¥—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–æ—á–Ω—ã–º–∏ –Ω–∞—É–∫–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∞–Ω–∞–ª–∏—Ç–∏–∫, –º–∞—Ç–µ–º–∞—Ç–∏–∫).")

    return recommendations


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_result(user_id: int):
    recommendations = calculate_results(user_id)

    if recommendations:
        user_data = users_db[user_id]
        selected_test = user_data['selected_test']
        message = "\n".join(recommendations)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return message
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."


