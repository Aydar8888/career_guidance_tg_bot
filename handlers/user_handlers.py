from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from keyboards.keyboards import yes_no_kb, test_choice_kb, create_question_kb, main_menu_kb, game_kb
from lexicon.lexicon_ru import LEXICON_RU
from lexicon.questions import all_tests
from database.database import user_dict_template, users_db
from copy import deepcopy
from services.services import *



router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        text=LEXICON_RU['/start'], 
        reply_markup=main_menu_kb
    )
    if message.from_user.id not in users_db:
        users_db[message.from_user.id] = user_dict_template.copy()




# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç", "–û –ø—Ä–æ–µ–∫—Ç–µ", "GitHub", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@router.message(F.text == LEXICON_RU['start_test'])
async def process_start_test(message: Message):
    await message.answer(
        text=LEXICON_RU['yes'],
        reply_markup=test_choice_kb
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –ø—Ä–æ–µ–∫—Ç–µ"
@router.message(F.text == LEXICON_RU['about_project'])
async def process_about_project(message: Message):
    project_description = (
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ "
        "–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ä—å–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–µ–π.\n\n"
        "–í –ø—Ä–æ–µ–∫—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã, –≤–∫–ª—é—á–∞—è –¢–µ—Å—Ç –ö–ª–∏–º–æ–≤–∞ (–î–î–û) –∏ –¥—Ä—É–≥–∏–µ.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç, –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö."
    )
    await message.answer(
        text=project_description,
        reply_markup=main_menu_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "GitHub"
@router.message(F.text == LEXICON_RU['github'])
async def process_github_button(message: Message):
    github_url = "https://github.com/Aydar8888/career_guidance_tg_bot"
    await message.answer(
        text=f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {github_url}",
        reply_markup=main_menu_kb
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
@router.message(F.text.in_([LEXICON_RU['test1'], LEXICON_RU['test2']]))
async def process_test_selection(message: Message):
    selected_test = message.text
    users_db[message.from_user.id]['selected_test'] = selected_test
    users_db[message.from_user.id]['state'] = True
    users_db[message.from_user.id]['question_number'] = 1

    # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –µ–≥–æ –∑–∞–Ω–æ–≤–æ
    users_db[message.from_user.id]['answers'][selected_test] = []
    
    await send_question(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(message: Message):
    user_data = users_db[message.from_user.id]
    selected_test = user_data['selected_test']
    question_number = user_data['question_number']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω –ª–∏ —Ç–µ—Å—Ç
    if question_number > len(all_tests[selected_test]):
        # user_data['state'] = False
        # await message.answer(text=LEXICON_RU['end_test'], reply_markup=game_kb)
        # print(users_db[message.from_user.id])
        if question_number > len(all_tests[selected_test]):
            result_message = send_result(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            await message.answer(text=result_message, reply_markup=game_kb)
            user_data['state'] = False
            
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    question_text = "–ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ—Ç–µ?"
    options = all_tests[selected_test][question_number]
    question_kb = create_question_kb(options)
    
    await message.answer(text=question_text, reply_markup=question_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@router.message(F.text.in_([option for test in all_tests.values() for options in test.values() for option in options]))
async def handle_question_answer(message: Message):
    user_data = users_db[message.from_user.id]
    selected_test = user_data['selected_test']
    if not user_data['state']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    user_data['answers'][selected_test].append(message.text)
    user_data['question_number'] += 1
    await send_question(message)

@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô")
async def process_no_answer(message: Message):
    await message.answer(text=LEXICON_RU['/start'], reply_markup=main_menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Ç–µ—Å—Ç–∞
@router.message(F.text == LEXICON_RU['no_button'])
async def process_no_answer(message: Message):
    await message.answer(text=LEXICON_RU['no'], reply_markup=main_menu_kb)

@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è")
async def review(message: Message):
    await message.answer(text='https://docs.google.com/forms/u/0/?tgif=d&ec=asw-forms-hero-goto&pli=1')